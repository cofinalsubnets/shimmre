;; This file contains the back-end for a shimmre/js implementation of
;; shimmre/js.

init ->
  var map = this.map = function (mfn, fn) {
    return function (s) {
      var res = mfn(s);
      return res && {val: fn(res.val), rem: res.rem};
    };
  };
  this.cat = function(p1, p2) {
    return function(str) {
      var t1, t2;
      return (t1 = p1(str)) && (t2 = p2(t1.rem)) && match(t1.val.concat(t2.val), t2.rem);
    };
  };

  var rep = this.rep = function(p) {
    return function(s) {
      var r;
      return (r = p(s)) && map(rep(p), function(a) {
        return r.val.concat(a);
      })(r.rem) || match([], s);
    };
  };

  this.rules = {};
  this.context = {};
  delete this.output;

atom -> return $.join('')
rAtom -> var rs = this.rules; return function (s) { return rs[$](s); };
term ->
  var t = $.join('');
  return function (str) {
    return str.substr(0, t.length) === t && match([t], str.slice(t.length));
  };
alt  -> return $.reduce(function (a,b) {
    return function (s) { return a(s) || b(s); }
  });
cat  -> return $.reduce(this.cat)
rep  -> return this.rep($[0])
not  -> return function (s) { return !$[0](s) && {val:[], rem:s}; }
opt  -> return function (s) { return $[0](s) || {val:[], rem:s}; }
and  -> return function (s) { return $[0](s) && {val:[], rem:s}; }
plus -> return this.cat($[0], this.rep($[0]))
drop -> return this.map($[0], function () {return [];})

charopt ->
  var re = RegExp('^'+$.join(''));
  return function (s) {
    var r = s.match(re);
    return r && {val:r[0], rem: s.slice(r[0].length)};
  };

sub ->
  this.currentRule = $[0];
  return this.rules[$[0]] = $[1]

rules -> return this.output

mainP ->
  var rs = this.rules, cr = this.currentRule;
  return this.output = function (s) {return rs[cr](s);};

code -> return $.join('')
compile -> 
  var atom = $[0], code = $[1], rule;
  if (!(rule = this.rules[atom]))
    throw new ReferenceError(
      "Compile rule `" + atom + "' defined before parse rule");
  var tfn       = eval("(function ($) {"+code+"})"),
      context   = this.context,
      transform = function (argv) {
        var res = tfn.call(context, argv);
        return (res === null || res === undefined) ? [] :
          Array.isArray(res) ? res : [res];
      };
  return this.rules[atom] = this.map(rule, transform);

