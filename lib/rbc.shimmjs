;; This file contains the _experimental_ shimmre/js back-end for a
;; shimmre/rb-to-Ruby compiler.

init -> this.rules = {};

atom -> return $.join('')
rAtom -> return "@rules[:"+JSON.stringify($[0])+"]"
term -> return "term("+JSON.stringify($.join(''))+")"
alt  -> return "["+$.join(',')+"].reduce(&method(:alt))"
cat  -> return "["+$.join(',')+"].reduce(&method(:cat))"
not  -> return "notp("+$[0]+")"
rep  -> return "rep("+$[0]+")"
opt  -> return "opt("+$[0]+")"
and  -> return "andp("+$[0]+")"
plus -> return "cat("+$[0]+",rep("+$[0]+"))"
drop -> return "map("+$[0]+",method(:drop))"
charopt -> return "cheat(Regexp.new('^'+"+JSON.stringify($.join(''))+"))"
sub ->
  this.currentRule = $[0];
  return this.rules[$[0]] = $[1]

rules -> return this.output = this.outputFn();

mainP ->
  var rbpeg = "def match(a,b)\n{val: a, rem: b}\nend\n\ndef term(t)\n->(s) {s.start_with?(t) && match([t], s.sub(t,''))}\nend\n\ndef cat(a,b)\n->(s) { (t1=a.call s) && (t2=b.call t1[:rem]) && match(t1[:val]+t2[:val], t2[:rem])}\nend\n\ndef alt(a,b)\n->(s) { a.call(s) || b.call(s) }\nend\n\ndef opt(p)\n->(s) { p.call(s) || match([],s) }\nend\n\ndef rep(p)\n->(s) do\n  v=[]\nwhile (r = p.call s)\n    s = r[:rem]\n    v += r[:val]\n  end\n  match v, s\nend\nend\n\ndef andp(p)\n->(s) { p.call(s) && match([],s) }\nend\n\ndef notp(p)\n->(s) { !p.call(s) && match([],s) }\nend\n\ndef cheat(re)\n->(s) { (r=s.match re) && match([r[0]], s[r[0].size..-1]) }\nend\n";
  var rbsup = "def map(a,b)\n->(s) {(r=a.call s) && match(b.call(r[:val]), r[:rem])}\nend\ndef drop(*a)\n[]\nend\ndef merge(v)\nv.nil? ? [] : (Array === v) ? v : [v]\nend\n";
  var rbmain = "def parse(s)\n@rules[:" + JSON.stringify(this.currentRule) + "].call(s)\nend\n";

  return this.outputFn = function () {
    var rbrules = "{", _x;
    for (_x in this.rules)
      rbrules += ":"+JSON.stringify(_x)+" => ->(s){"+this.rules[_x]+".call s},";
    rbrules += "}"
    return "module Shimmre\nclass << self\n"+rbpeg+rbsup+rbmain+"end\n@rules="+rbrules+"\nend\n";
  };

code -> return $.join('')

compile -> 
  var atom = $[0], code = $[1], rule;
  if (!(rule = this.rules[atom]))
    throw new ReferenceError(
      "Compile rule `" + atom + "' defined before parse rule");
  var tfn       = "->(_){"+code+"}";
  return this.rules[atom] = "map(map("+rule+","+tfn+"),method(:merge))";

