;; This file contains the back-end for a mostly feature-complete shimmre/js
;; implementation of shimmre/js (it lacks some compile-time niceties). This
;; version is a packrat parser with support for direct and indirect
;; left-recursion.

init ->
  var map = this.map = function (mfn, fn) {
    return function (s) {
      var res = mfn(s);
      return res && {val: fn(res.val), rem: res.rem};
    };
  };
  this.cat = function(p1, p2) {
    return function(str) {
      var t1, t2;
      return (t1 = p1(str)) && (t2 = p2(t1.rem)) &&
        {val: t1.val.concat(t2.val), rem: t2.rem};
    };
  };

  var rep = this.rep = function(p) {
    return function(s) {
      var r;
      return (r = p(s)) && map(rep(p), function(a) {
        return r.val.concat(a);
      })(r.rem) || {val: [], rem: s};
    };
  };
  this.alt = function (a,b) { return function (s) { return a(s) || b(s); } };

  this.rules = {};
  this.context = {};
  delete this.output;

atom -> return $.join('')
rAtom -> var rs = this.rules; return function (s) { return rs[$[0]](s); };
term ->
  var t = $.join('');
  return function (str) {
    return str.substr(0, t.length) === t && {val: [t], rem: str.slice(t.length)};
  };

alt  -> return $.reduce(this.alt)
cat  -> return $.reduce(this.cat)
rep  -> return this.rep($[0])
not  -> return function (s) { return !$[0](s) && {val:[], rem:s}; }
opt  -> return function (s) { return $[0](s) || {val:[], rem:s}; }
and  -> return function (s) { return $[0](s) && {val:[], rem:s}; }
plus -> return this.cat($[0], this.rep($[0]))
drop -> return this.map($[0], function () {return [];})
semp -> return function (s) {
    var res = $[0](s);
    if (res && res.val[0]) return res;
  }

charopt ->
  var re = RegExp('^'+$.join(''));
  return function (s) {
    var r = s.match(re);
    return r && {val:[r[0]], rem: s.slice(r[0].length)};
  };

sub ->
  this.currentRule = $[0];
  if (this.rules.hasOwnProperty($[0]))
    return this.rules[$[0]] = this.alt(this.rules[$[0]], $[1]);
  else return this.rules[$[0]] = $[1]

rules ->
  if (!this.output) throw new SyntaxError('No main rule found');

  var LR = function () {}, nomemo = new Object();
  var growLR = function (fn, d, memo) {
    var res, rem = memo[d].rem;
    while (rem && (res = fn(d)) && res.rem.length < rem.length) {
      rem = res.rem;
      memo[d] = res;
    }
  }, memoize = function (fn) {
    var memo = {};
    var wrapper = function (d) {
      if (memo.hasOwnProperty(d)) {
        if (memo[d] === nomemo)
          return fn(d);
        else if (memo[d] instanceof LR)
          throw memo[d];
        else return memo[d];
      } else {
        memo[d] = new LR();
        try {
          memo[d] = fn(d);
        } catch (e) {
          if (!(e instanceof LR)) throw e;
          if (e === memo[d]) {
            memo[d] = false;
            if (memo[d] = fn(d))
              growLR(fn, d, memo);
          } else {
            memo[d] = nomemo;
            throw e;
          }
        }
        return memo[d];
      }
    };
    wrapper.clearCache = function () { memo = {}; };
    return wrapper;
  };

  for (var r in this.rules)
    this.rules[r] = memoize(this.rules[r]);

  return this.output;

mainP ->
  var cr = this.currentRule;
  return this.output = function (s) {
    var res = this.rules[cr](s);
    for (var k in this.rules) this.rules[k].clearCache();
    return res;
  }.bind(this);

code -> return $.join('')
compile -> 
  var atom = $[0], code = $[1], rule;
  if (!(rule = this.rules[atom]))
    throw new ReferenceError(
      "Compile rule `" + atom + "' defined before parse rule");
  var tfn       = new Function('$', code).bind(this.context),
      transform = function (argv) {
        var res = tfn(argv);
        return (res === null || res === undefined) ? [] :
          Array.isArray(res) ? res : [res];
      };
  return this.rules[atom] = this.map(rule, transform);

